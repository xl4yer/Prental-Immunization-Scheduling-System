@inject NavigationManager Nav
@inject ILocalStorageService localStorage

<MudAppBar Elevation="1" Color="Color.Primary">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                   OnClick="async () => await OnSidebarToggled.InvokeAsync()" />
    <MudSpacer />
    <div class="navigation">
        <a class="button" href="" @onclick="Logout">
            <img src="Admin.png">
            <div class="logout"><u>LOGOUT</u></div>
        </a>
    </div>
</MudAppBar>

@code {
    private bool _isLightMode = true;
    private MudTheme _currentTheme = new MudTheme();
    [Parameter]
    public EventCallback OnSidebarToggled { get; set; }
    [Parameter]
    public EventCallback<MudTheme> OnThemeToggled { get; set; }
    public string name = "";

    private async Task ToggleTheme()
    {
        _isLightMode = !_isLightMode;

        _currentTheme = !_isLightMode ? GenerateDarkTheme() : new MudTheme();

        await OnThemeToggled.InvokeAsync(_currentTheme);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            name = await localStorage.GetItemAsStringAsync("name");
            // ToggleTheme();
        }
    }

    private MudTheme GenerateDarkTheme() =>
    new MudTheme
        {
            Palette = new Palette()
            {
                Black = "#1A1A27",
                Background = "#1A1A27",
                BackgroundGrey = "#1A1A27",
                Surface = "#373740",
                TextPrimary = "#ffffffb3",
                TextSecondary = "rgba(255,255,255, 0.50)",
                AppbarBackground = "#1A1A27",
                AppbarText = "#ffffffb3",
                DrawerBackground = "#1A1A27",
                DrawerText = "#ffffffb3",
                DrawerIcon = "#ffffffb3"
            }
        };

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Logout", href: "/" ),
    };

    public async Task Logout()
    {
        await localStorage.RemoveItemAsync("token");
        Nav.NavigateTo("/");
    }
}