@page "/child"
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject ISnackbar snackBar
@inject IDialogService dialogService
@using System.Net.Http.Headers
@inject IDialogService Dialog
@inject IJSRuntime IJS
@inject SweetAlertService Swal


<PageTitle>Child Record</PageTitle>

<MudGrid Class="mb-3">
    <MudGrid Class="mb-3">
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudToolBar>
                <MudText Typo="Typo.body1" Style="text-transform:uppercase">Child Information</MudText>
            </MudToolBar>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudToolBar Justify="Justify.End">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="(e => RefreshChild())">Refresh</MudButton>&nbsp;
                <MudButton Color="Color.Tertiary" Variant="Variant.Filled" @onclick="(e => AddChild())">Add</MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem xs="12" sm="12" md="4" lg="6">
            <MudToolBar Justify="Justify.End">
                <MudTextField @bind-Value="txtchild" Clearable TextChanged="SearchChild" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Tertiary" Label="Search" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudToolBar>
        </MudItem>
    </MudGrid>
    </MudGrid>

@if (childList != null && childList.Any())
{
    <MudTable Class="ma-5" Dense="true" Hover="true" Items="@childList" HorizontalScrollbar="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "500px" : "")">
        <HeaderContent>
            <MudTh>Child Name</MudTh>
            <MudTh>Age</MudTh>
            <MudTh>Feeding Method</MudTh>
            <MudTh>Delivery</MudTh>
            <MudTh>Allergy</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.fullname</MudTd>
            <MudTd DataLabel="Age">
                @if (context.age == "0" || context.age == "1")
                {
                    <p1>@context.age month</p1>
                }
                else
                {
                    <p1>@context.age months</p1>
                }
            </MudTd>
            <MudTd DataLabel="Feeding">@context.feeding</MudTd>
            <MudTd DataLabel="Contact">@context.delivery</MudTd>
            <MudTd DataLabel="Allergy">
                @if (string.IsNullOrEmpty(context.allergy))
                {
                    <p>N/A</p>
                }
                else
                {
                    <p>@context.allergy</p>
                }
            </MudTd>
            <MudTd>
                <MudTooltip Text="Edit Child information" Arrow="true" Placement="Placement.Right">
                    <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Edit" @onclick="(e => UpdateChild(context.childID))" Size="Size.Small" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudText Align="Align.Left">No records found</MudText>
}


@code {
    private string search { get; set; } = "";
    private string txtchild { get; set; } = "";
    private string txtsched { get; set; } = "";
    child[]? childList;
    bool fixed_header = true;
    bool fixed_footer = false;
    DateTime? date = DateTime.Now;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadChild();
        }
    }

    private async Task loadChild()
    {
        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.GetAsync($"api/child/child");
                if (response.IsSuccessStatusCode)
                {
                    string contentrespose = await response.Content.ReadAsStringAsync();
                    childList = JsonConvert.DeserializeObject<child[]>(contentrespose);
                    StateHasChanged();
                }
                else
                {
                    snackBar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            //
        }
    }

    private async Task SearchChild()
    {
        if (string.IsNullOrWhiteSpace(txtchild))
        {
            StateHasChanged();
            return;
        }
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
            await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.GetAsync($"api/child/searchchild?search={txtchild}");
            if (response.IsSuccessStatusCode)
            {
                string contentrespose = await response.Content.ReadAsStringAsync();
                childList = JsonConvert.DeserializeObject<child[]>(contentrespose);
                StateHasChanged();
            }
            else
            {
                snackBar.Add($"Warning: {response.StatusCode}", Severity.Warning);
            }
        }
    }

    private async Task SearchSchedule()
    {

    }

    private async Task AddChild()
    {
        var parameters = new DialogParameters();
        parameters.Add("xchild", new child());
        var dialog = Dialog.Show<AddChild>("Add Child Information", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await loadChild();
        }
    }

    [Parameter] public info _info { get; set; } = new info();
    private async Task UpdateChild(string id)
    {
        child[]? _child;
        var xpatient = from s in childList where s.childID == id select s;
        _child = xpatient.ToArray();
        _info.infoID = _child[0].infoID;
        _info.fullname = _child[0].mothersname;
        var parameters = new DialogParameters();
        var update = childList.FirstOrDefault(_ => _.childID == id);
        parameters.Add("xinfo", _info);
        parameters.Add("xchild", update);

        var dialog = await Dialog.Show<UpdateChild>("Update Child", parameters).Result;
    }

    private async Task RefreshChild()
    {
        await loadChild();

    }

}