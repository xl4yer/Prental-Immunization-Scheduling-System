@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar

<EditForm Model="@xinfo" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog TitleClass="mud-primary" DisableSidePadding="true">
        <TitleContent>
            <MudText Typo="Typo.h6" Style="color:white">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
                Add Prenatal Information
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                <p1>First Name</p1>
                <MudTextField Clearable @bind-Value="@xinfo.fname" For="@(() => xinfo.fname)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>Middle Name</p1>
                <MudTextField Clearable @bind-Value="@xinfo.mname" HelperText="Leave blank if not applicable" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>Last Name</p1>
                <MudTextField Clearable @bind-Value="@xinfo.lname" For="@(() => xinfo.lname)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>Birthdate</p1>
                <MudDatePicker Editable="true" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Date="birthdate" Placeholder="Select Date" /><br />
                <p1>Contact No.</p1>
                <MudTextField Clearable @bind-Value="@xinfo.contact" For="@(() => xinfo.contact)" Adornment="Adornment.Start" AdornmentText="+63" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>Address</p1>
                <MudTextField Clearable @bind-Value="@xinfo.address" For="@(() => xinfo.address)" T="string" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>Husband Name</p1>
                <MudTextField Clearable @bind-Value="@xinfo.hname" Variant="Variant.Outlined" HelperText="Leave blank if not applicable" Margin="Margin.Dense"></MudTextField><br />
                <p1>Occupation</p1>
                <MudTextField Clearable @bind-Value="@xinfo.occupation" HelperText="Leave blank if not applicable" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Disabled="@_processing" @onclick="Submit" Variant="Variant.Filled" Color="Color.Tertiary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Please Wait</MudText>
                }
                else
                {
                    <MudText>Submit</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private string text { get; set; } = "";
    DateTime? birthdate = DateTime.Today;
    [Parameter] public info xinfo { get; set; } = new info();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private bool _processing = false;

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    public void OnValidSubmit(EditContext context)
    {

    }

    private async Task Submit()
    {
        _processing = true;
        if (string.IsNullOrEmpty(xinfo.fname) ||
        string.IsNullOrEmpty(xinfo.lname) ||
         string.IsNullOrEmpty(xinfo.contact) ||
         string.IsNullOrEmpty(xinfo.address))
        {
            snackBar.Add($"Provide the required fields!", Severity.Warning);
        }
        else
        {
            int i = 0;
            var info = new info
                {
                    infoID = Guid.NewGuid().ToString(),
                    fname = xinfo.fname,
                    mname = xinfo.mname,
                    lname = xinfo.lname,
                    bdate = birthdate.Value,
                    contact = xinfo.contact,
                    address = xinfo.address,
                    hname = xinfo.hname,
                    occupation = xinfo.occupation
                };

            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var json = JsonConvert.SerializeObject(info);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PostAsync($"api/Info/AddInfo", content);
                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        await InvokeAsync(async () =>
                        {
                            await Task.Delay(2000);
                            _processing = true;
                            snackBar.Add($"Done: Successfully Saved!", Severity.Success);
                            MudDialog.Cancel();
                            StateHasChanged();
                        });
                    }
                }
                else
                {
                    await InvokeAsync(() =>
                    {
                        snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                        StateHasChanged();
                    });
                }
            }
        }
       
    }
}
