@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject HttpClient http

<MudDialog TitleClass="mud-primary" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3 mb-n1" />
            Mark As Done?
        </MudText>
    </TitleContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Submit">Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string text { get; set; } = "";
    DateTime? sched = DateTime.Today;
    [Parameter] public immunization ximm { get; set; } = new immunization();
    [Parameter] public child xchild { get; set; } = new child();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private async Task<IEnumerable<child>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xchild = await httpClient.GetFromJsonAsync<List<child>>($"api/Child/SearchChild?search={value}");
        return xchild;
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    public async Task PhilSms()
    {
       if (ximm.vaccine == "BCG")
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Congratulations, {ximm.fullname}! You completed the BCG vaccine on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
           
        }
        else if (ximm.vaccine == "Penta 3rd Dose")
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Congratulations, {ximm.fullname}! You completed the Penta vaccine on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
        }
        else if (ximm.vaccine == "bOPV 3rd Dose")
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Congratulations, {ximm.fullname}! You completed the bOPV vaccine on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
        }
        else if (ximm.vaccine == "IPV 2nd Dose")
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Congratulations, {ximm.fullname}! You completed the IPV vaccine on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
        }
        else if (ximm.vaccine == "MMR 2nd Dose")
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Congratulations, {ximm.fullname}! You completed the MMR vaccine on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
        }
        else if (ximm.vaccine == "PCV13 3rd Dose")
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Congratulations, {ximm.fullname}! You completed the PCV13 vaccine on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
        }
        else
        {
            var url = "https://app.philsms.com/api/v3/sms/send";
            var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
            var request = new
            {
                recipient = $"63{ximm.contact}",
                sender_id = "PhilSMS",
                type = "plain",
                message = $"Goodjob!, {ximm.fullname}! You have received the {ximm.vaccine} on {DateTime.Now.ToString("MMMM dd, yyyy")}"
            };

            var json = JsonConvert.SerializeObject(request);
            var content = new StringContent(json);
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var response = await http.PostAsync(url, content);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully Sent");
            }
            else
            {
                Console.WriteLine("Failed to Send");
            }
        }
    }

    private async Task Submit()
    {
        int i = 0;
        var _imm = new immunization
            {
                immunizationID = ximm.immunizationID,
                vaccine = ximm.vaccine,
                childID = xchild.childID,
                date = ximm.date,
                status = "Done"
            };

        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            var json = JsonConvert.SerializeObject(_imm);
            HttpContent content = new StringContent(json);
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
            await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.PutAsync($"api/Immunization/UpdateImmunization", content);
            if (response.IsSuccessStatusCode)
            {
                string contentresponse = await response.Content.ReadAsStringAsync();
                i = JsonConvert.DeserializeObject<int>(contentresponse);
                if (i > 0)
                {
                    await InvokeAsync(async () =>
                    {
                        await PhilSms();
                        snackBar.Add($"Done: Confirmed!", Severity.Success);
                        MudDialog.Cancel();
                        StateHasChanged();
                    });
                }
            }
            else
            {
                await InvokeAsync(() =>
                {
                    snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    StateHasChanged();
                });
            }
        }
    }
}
