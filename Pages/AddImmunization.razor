@page "/addimmsched"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject HttpClient http

<PageTitle>Add Immunization</PageTitle>
<MudCard Style="height:600px">
<MudToolBar>
    <h5>Add Immunization Schedule</h5>
</MudToolBar>
<MudContainer Style="max-height: 500px; overflow-y: scroll">
    <p1>Name</p1>
        <MudAutocomplete Clearable T="child" Placeholder="Search Patient Name" @bind-Value="xchild" Variant="Variant.Outlined" Margin="Margin.Dense" SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.fullname}")" Strict="false"></MudAutocomplete><br />
    <p1>Scheduled Date</p1>
    <MudDatePicker Editable="true" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Date="sched" Placeholder="Select Date" /><br />
    <p1>Vaccine</p1>
    <MudSelect @bind-Value="@ximm.vaccine" Margin="Margin.Dense" Placeholder="Select Vaccine" T="string" Variant="Variant.Outlined">
        <MudSelectItem Value="@("BCG")" />
        <MudSelectItem Value="@("Penta 1st Dose")" />
        <MudSelectItem Value="@("Penta 2nd Dose")" />
         <MudSelectItem Value="@("Penta 3rd Dose")" />
         <MudSelectItem Value="@("BOPV 1st Dose")" />
         <MudSelectItem Value="@("BOPV 2nd Dose")" />
         <MudSelectItem Value="@("BOPV 3rd Dose")" />
        <MudSelectItem Value="@("IPV 1st Dose")" />
        <MudSelectItem Value="@("IPV 2nd Dose")" />
         <MudSelectItem Value="@("MCV 1st Dose")" />
         <MudSelectItem Value="@("MCV 2nd Dose")" />
         <MudSelectItem Value="@("PCV13 1st Dose")" />
        <MudSelectItem Value="@("PCV13 2nd Dose")" />
        <MudSelectItem Value="@("PCV13 3rd Dose")" />
    </MudSelect><br />
    <MudToolBar>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Tertiary" @onclick="Submit">Save</MudButton>
    </MudToolBar>
</MudContainer>
</MudCard>

@code {
    private string text { get; set; } = "";
    DateTime? sched = DateTime.Today;
    [Parameter] public immunization ximm { get; set; } = new immunization();
    [Parameter] public child xchild { get; set; } = new child();

    private async Task<IEnumerable<child>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xchild = await httpClient.GetFromJsonAsync<List<child>>($"api/Child/SearchChild?search={value}");
        return xchild;
    }

    public async Task PhilSms()
    {
        var url = "https://app.philsms.com/api/v3/sms/send";
        var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
        var request = new
        {
            recipient = $"63{xchild.contact}",
            sender_id = "PhilSMS",
            type = "plain",
            message = $"{xchild.fullname}, your scheduled {ximm.vaccine} is on {ximm.date?.ToString("MMMM d, yyyy")}"
        };

        var json = JsonConvert.SerializeObject(request);
        var content = new StringContent(json);
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        var response = await http.PostAsync(url, content);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Successfully Sent");
        }
        else
        {
            Console.WriteLine("Failed to Send");
        }
    }

    private async Task Submit()
    {
        int i = 0;
        var _imm = new immunization
            {
                immunizationID = Guid.NewGuid().ToString(),
                vaccine = ximm.vaccine,
                childID = xchild.childID,
                date = sched.Value,
                status = "Scheduled"
            };

        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            var json = JsonConvert.SerializeObject(_imm);
            HttpContent content = new StringContent(json);
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
            await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.PostAsync($"api/Immunization/AddImmunization", content);
            if (response.IsSuccessStatusCode)
            {
                string contentresponse = await response.Content.ReadAsStringAsync();
                i = JsonConvert.DeserializeObject<int>(contentresponse);
                if (i > 0)
                {
                    await InvokeAsync(async () =>
                    {
                        await PhilSms();
                        snackBar.Add($"Done: Successfully Saved!", Severity.Success);
                        StateHasChanged();
                    });
                }
            }
            else
            {
                await InvokeAsync(() =>
                {
                    snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    StateHasChanged();
                });
            }
        }
    }
}
