@page "/addpresched"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject HttpClient http

<PageTitle>Add Prenatal</PageTitle>

<EditForm Model="@xpre" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard Style="height:600px">
        <MudToolBar>
            <MudText Typo="Typo.body1" Style="text-transform:uppercase">Add Prenatal Schedule</MudText>
        </MudToolBar>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <p1>Name</p1>
            <MudAutocomplete Clearable T="info" Placeholder="Search Patient Name" @bind-Value="xinfo" For="@(() => xinfo)" Variant="Variant.Outlined" Margin="Margin.Dense" SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.fullname}")" Strict="false" /><br />
            <p1>Scheduled Date</p1>
            <MudDatePicker Editable="true" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Date="xpre.date" Placeholder="Select Date" /><br />
            <p1>Vaccine</p1>
            <MudSelect @bind-Value="@xpre.vaccine" For="@(() => xpre.vaccine)" Margin="Margin.Dense" Placeholder="Select Vaccine" T="string" Variant="Variant.Outlined">
                @foreach (var vaccine in vaccines)
                {
                    <MudSelectItem Value="@vaccine" />
                }
            </MudSelect> <br />
            <MudToolBar>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Warning">Clear</MudButton> &nbsp;
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Submit">Save</MudButton>
            </MudToolBar>
        </MudContainer>
    </MudCard>
</EditForm>

@code {
    private string text { get; set; } = "";
    [Parameter] public prenatal xpre { get; set; } = new prenatal();
    [Parameter] public info xinfo { get; set; } = new info();

    private List<string> vaccines = new List<string>
    {
        "Tetanus 1st Dose",
        "Tetanus 2nd Dose",
        "Tetanus 3rd Dose",
        "Tetanus 4th Dose",
        "Tetanus 5th Dose"
    };

    public void OnValidSubmit(EditContext context)
    {

    }

    private async Task<IEnumerable<info>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xinfo = await httpClient.GetFromJsonAsync<List<info>>($"api/Info/SearchInfo?search={value}");
        return xinfo;
    }

    public async Task PhilSms()
    {
        var url = "https://app.philsms.com/api/v3/sms/send";
        var accessToken = "411|ShHwb5NAblbVdVl4ozOUtiGh2nPUq07QrpZXjGgb";
        var request = new
        {
            recipient = $"63{xinfo.contact}",
            sender_id = "PhilSMS",
            type = "plain",
            message = $"Good day! {xinfo.fullname}, your scheduled {xpre.vaccine} is on {xpre.date?.ToString("MMMM d, yyyy")}"
        };

        var json = JsonConvert.SerializeObject(request);
        var content = new StringContent(json);
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        var response = await http.PostAsync(url, content);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Successfully Sent");
        }
        else
        {
            Console.WriteLine("Failed to Send");
        }
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(xinfo.infoID) ||
            string.IsNullOrEmpty(xpre.vaccine))
        {
            snackBar.Add($"Provide the required fields!", Severity.Warning);
        }
        else
        {
            int i = 0;
            var xpresched = new prenatal
                {
                    prenatalID = Guid.NewGuid().ToString(),
                    vaccine = xpre.vaccine,
                    infoID = xinfo.infoID,
                    date = xpre.date,
                    status = "Scheduled"
                };

            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var json = JsonConvert.SerializeObject(xpresched);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PostAsync($"api/Prenatal/AddPrenatal", content);
                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        await InvokeAsync(async () =>
                        {
                            // await PhilSms();
                            snackBar.Add($"Done: Successfully Saved!", Severity.Success);
                            StateHasChanged();
                        });
                    }
                }
                else
                {
                    await InvokeAsync(() =>
                    {
                        snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                        StateHasChanged();
                    });
                }
            }
        }

    }
}
