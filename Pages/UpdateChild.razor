@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <p1>Parent Name</p1>
            <MudAutocomplete Clearable T="info" @bind-Value="xinfo" Variant="Variant.Outlined" Margin="Margin.Dense" SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.fullname}")" Strict="false"></MudAutocomplete><br />
             <p1>First Name</p1>
             <MudTextField Clearable @bind-Value="@xchild.fname" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
             <p1>Middle Name</p1>
             <MudTextField Clearable @bind-Value="@xchild.mname" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
             <p1>Last Name</p1>
             <MudTextField Clearable @bind-Value="@xchild.lname" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
             <p1>Birthdate</p1>
             <MudDatePicker Editable="true" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Date="birthdate" Placeholder="Select Date" /><br />
             <p1>Feeding Method</p1>
             <MudSelect @bind-Value="@xchild.feeding" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                 <MudSelectItem Value="@("Breastfeed")" />
                 <MudSelectItem Value="@("Formula")" />
             </MudSelect><br />
             <p1>Allergy</p1>
             <MudTextField Clearable @bind-Value="@xchild.allergy" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
             <p1>Delivery</p1>
             <MudSelect @bind-Value="@xchild.delivery" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                 <MudSelectItem Value="@("Normal")" />
                 <MudSelectItem Value="@("Caesarean")" />
             </MudSelect><br />
         </MudContainer>
     </DialogContent>
     <DialogActions>
         <MudButton OnClick="Cancel">Cancel</MudButton>
         <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Submit">Submit</MudButton>
     </DialogActions>
 </MudDialog>

    @code {
    bool hide = false;
    private string text { get; set; } = "";
    DateTime? birthdate = DateTime.Today;
    [Parameter] public info xinfo { get; set; } = new info();
    [Parameter] public child xchild { get; set; } = new child();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<info>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xinfo = await httpClient.GetFromJsonAsync<List<info>>($"api/info/searchinfo?search={value}");
        return xinfo;
    }

    private async Task Submit()
    {
        int i = 0;
        var child = new child
            {
                childID = xchild.childID,
                infoID = xinfo.infoID,
                fname = xchild.fname,
                mname = xchild.mname,
                lname = xchild.lname,
                bdate = xchild.bdate,
                feeding = xchild.feeding,
                allergy = xchild.allergy,
                delivery = xchild.delivery
            };

        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            var json = JsonConvert.SerializeObject(child);
            HttpContent content = new StringContent(json);
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
            await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.PutAsync($"api/child/updatechild", content);
            if (response.IsSuccessStatusCode)
            {
                string contentresponse = await response.Content.ReadAsStringAsync();
                i = JsonConvert.DeserializeObject<int>(contentresponse);
                if (i > 0)
                {
                    await InvokeAsync(async () =>
                    {
                        snackBar.Add($"Done: Successfully Updated!", Severity.Success);
                        MudDialog.Cancel();
                        StateHasChanged();
                    });
                }
            }
            else
            {
                await InvokeAsync(() =>
                {
                    snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                    StateHasChanged();
                });
            }
        }
    }
 }