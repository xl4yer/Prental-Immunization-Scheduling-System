@page "/"
@layout LoginLayout
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@using Bhcirs.Models
@inject ISnackbar snackBar

<section class="text-center">
    <div class="p-5 bg-image" style="background-image: url('171.jpg'); height: 300px;"></div>
    <div class="card mx-4 mx-md-5 shadow-5-strong" style="margin-top: -100px; background: hsla(0, 0%, 100%, 0.8); backdrop-filter: blur(30px);">
        <div class="card-body py-5 px-md-5">
            <div class="row d-flex justify-content-center">
                <div class="col-lg-8">
                    <img src="logo.png" style="height: 200px;" />
                    <form>
                        <center>
                            <div class="form-outline mb-4">
                                <input type="email" oninvalid="this.setCustomValidity(' ')" id="form3Example3" class="form-control" @bind-value="username" placeholder="Username" style="width: 300px; text-align: center;" />
                            </div>
                        </center>
                        <center>
                            <div class="form-outline mb-4">
                                <input type="password" id="form3Example4" class="form-control" @bind-value="password" placeholder="Password" style="width: 300px; text-align: center;" />
                            </div>
                        </center>
                        <button type="submit" style="width: 200px;" class="btn btn-primary btn-block mb-4" @onclick="UserLogin">Login</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

    @code {
    string? username, password, message;
    List<users> xuser;
    [Parameter]
    public string ADMIN { get; set; } = "";

    private async Task UserLogin()
    {
        xuser = new List<users>();
        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"{Nav.BaseUri}");
            HttpResponseMessage json = await client.GetAsync($"api/User/Login?user={username}&pwd={password}");
            if (json.IsSuccessStatusCode)
            {
                string content = await json.Content.ReadAsStringAsync();
                List<users> code = JsonConvert.DeserializeObject<List<users>>(content);

                if (code.Count > 0)
                {
                    xuser.Add(new users()
                        {
                            userID = code[0].userID,
                            token = code[0].token,
                            name = code[0].name,
                            username = code[0].username,
                        });

                    await localStorage.SetItemAsStringAsync("token", xuser[0].token);
                    await localStorage.SetItemAsStringAsync("userID", xuser[0].userID);
                    await localStorage.SetItemAsStringAsync("name", xuser[0].name);
                    Nav.NavigateTo("/dashboard");
                }
                else
                {
                    snackBar.Add($"Invalid Username or Password", Severity.Warning);
                }
            }
            else
            {
                snackBar.Add($"Invalid Username or Password", Severity.Warning);
            }
        }
    }
}